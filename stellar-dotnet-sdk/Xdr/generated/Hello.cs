// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

namespace stellar_dotnet_sdk.xdr
{
// === xdr source ============================================================

//  struct Hello
//  {
//      uint32 ledgerVersion;
//      uint32 overlayVersion;
//      uint32 overlayMinVersion;
//      Hash networkID;
//      string versionStr<100>;
//      int listeningPort;
//      NodeID peerID;
//      AuthCert cert;
//      uint256 nonce;
//  };

//  ===========================================================================
    public class Hello
    {
        public Uint32 LedgerVersion { get; set; }
        public Uint32 OverlayVersion { get; set; }
        public Uint32 OverlayMinVersion { get; set; }
        public Hash NetworkID { get; set; }
        public string VersionStr { get; set; }
        public int ListeningPort { get; set; }
        public NodeID PeerID { get; set; }
        public AuthCert Cert { get; set; }
        public Uint256 Nonce { get; set; }

        public static void Encode(XdrDataOutputStream stream, Hello encodedHello)
        {
            Uint32.Encode(stream, encodedHello.LedgerVersion);
            Uint32.Encode(stream, encodedHello.OverlayVersion);
            Uint32.Encode(stream, encodedHello.OverlayMinVersion);
            Hash.Encode(stream, encodedHello.NetworkID);
            stream.WriteString(encodedHello.VersionStr);
            stream.WriteInt(encodedHello.ListeningPort);
            NodeID.Encode(stream, encodedHello.PeerID);
            AuthCert.Encode(stream, encodedHello.Cert);
            Uint256.Encode(stream, encodedHello.Nonce);
        }

        public static Hello Decode(XdrDataInputStream stream)
        {
            var decodedHello = new Hello();
            decodedHello.LedgerVersion = Uint32.Decode(stream);
            decodedHello.OverlayVersion = Uint32.Decode(stream);
            decodedHello.OverlayMinVersion = Uint32.Decode(stream);
            decodedHello.NetworkID = Hash.Decode(stream);
            decodedHello.VersionStr = stream.ReadString();
            decodedHello.ListeningPort = stream.ReadInt();
            decodedHello.PeerID = NodeID.Decode(stream);
            decodedHello.Cert = AuthCert.Decode(stream);
            decodedHello.Nonce = Uint256.Decode(stream);
            return decodedHello;
        }
    }
}