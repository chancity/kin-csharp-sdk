// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

namespace stellar_dotnet_sdk.xdr
{
// === xdr source ============================================================

//  union AuthenticatedMessage switch (uint32 v)
//  {
//  case 0:
//      struct
//  {
//     uint64 sequence;
//     StellarMessage message;
//     HmacSha256Mac mac;
//      } v0;
//  };

//  ===========================================================================
    public class AuthenticatedMessage
    {
        public Uint32 Discriminant { get; set; } = new Uint32();

        public AuthenticatedMessageV0 V0 { get; set; }

        public static void Encode(XdrDataOutputStream stream, AuthenticatedMessage encodedAuthenticatedMessage)
        {
            stream.WriteInt(encodedAuthenticatedMessage.Discriminant.InnerValue);
            switch (encodedAuthenticatedMessage.Discriminant.InnerValue)
            {
                case 0:
                    AuthenticatedMessageV0.Encode(stream, encodedAuthenticatedMessage.V0);
                    break;
            }
        }

        public static AuthenticatedMessage Decode(XdrDataInputStream stream)
        {
            var decodedAuthenticatedMessage = new AuthenticatedMessage();
            var discriminant = Uint32.Decode(stream);
            decodedAuthenticatedMessage.Discriminant = discriminant;
            switch (decodedAuthenticatedMessage.Discriminant.InnerValue)
            {
                case 0:
                    decodedAuthenticatedMessage.V0 = AuthenticatedMessageV0.Decode(stream);
                    break;
            }
            return decodedAuthenticatedMessage;
        }

        public class AuthenticatedMessageV0
        {
            public Uint64 Sequence { get; set; }
            public StellarMessage Message { get; set; }
            public HmacSha256Mac Mac { get; set; }

            public static void Encode(XdrDataOutputStream stream, AuthenticatedMessageV0 encodedAuthenticatedMessageV0)
            {
                Uint64.Encode(stream, encodedAuthenticatedMessageV0.Sequence);
                StellarMessage.Encode(stream, encodedAuthenticatedMessageV0.Message);
                HmacSha256Mac.Encode(stream, encodedAuthenticatedMessageV0.Mac);
            }

            public static AuthenticatedMessageV0 Decode(XdrDataInputStream stream)
            {
                var decodedAuthenticatedMessageV0 = new AuthenticatedMessageV0();
                decodedAuthenticatedMessageV0.Sequence = Uint64.Decode(stream);
                decodedAuthenticatedMessageV0.Message = StellarMessage.Decode(stream);
                decodedAuthenticatedMessageV0.Mac = HmacSha256Mac.Decode(stream);
                return decodedAuthenticatedMessageV0;
            }
        }
    }
}