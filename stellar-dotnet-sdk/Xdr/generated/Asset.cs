// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

namespace stellar_dotnet_sdk.xdr
{
// === xdr source ============================================================

//  union Asset switch (AssetType type)
//  {
//  case ASSET_TYPE_NATIVE: // Not credit
//      void;
//  
//  case ASSET_TYPE_CREDIT_ALPHANUM4:
//      struct
//      {
//          opaque assetCode[4]; // 1 to 4 characters
//          AccountID issuer;
//      } alphaNum4;
//  
//  case ASSET_TYPE_CREDIT_ALPHANUM12:
//      struct
//      {
//          opaque assetCode[12]; // 5 to 12 characters
//          AccountID issuer;
//      } alphaNum12;
//  
//      // add other asset types here in the future
//  };

//  ===========================================================================
    public class Asset
    {
        public AssetType Discriminant { get; set; } = new AssetType();

        public AssetAlphaNum4 AlphaNum4 { get; set; }
        public AssetAlphaNum12 AlphaNum12 { get; set; }

        public static void Encode(XdrDataOutputStream stream, Asset encodedAsset)
        {
            stream.WriteInt((int) encodedAsset.Discriminant.InnerValue);
            switch (encodedAsset.Discriminant.InnerValue)
            {
                case AssetType.AssetTypeEnum.ASSET_TYPE_NATIVE:
                    break;
                case AssetType.AssetTypeEnum.ASSET_TYPE_CREDIT_ALPHANUM4:
                    AssetAlphaNum4.Encode(stream, encodedAsset.AlphaNum4);
                    break;
                case AssetType.AssetTypeEnum.ASSET_TYPE_CREDIT_ALPHANUM12:
                    AssetAlphaNum12.Encode(stream, encodedAsset.AlphaNum12);
                    break;
            }
        }

        public static Asset Decode(XdrDataInputStream stream)
        {
            var decodedAsset = new Asset();
            var discriminant = AssetType.Decode(stream);
            decodedAsset.Discriminant = discriminant;
            switch (decodedAsset.Discriminant.InnerValue)
            {
                case AssetType.AssetTypeEnum.ASSET_TYPE_NATIVE:
                    break;
                case AssetType.AssetTypeEnum.ASSET_TYPE_CREDIT_ALPHANUM4:
                    decodedAsset.AlphaNum4 = AssetAlphaNum4.Decode(stream);
                    break;
                case AssetType.AssetTypeEnum.ASSET_TYPE_CREDIT_ALPHANUM12:
                    decodedAsset.AlphaNum12 = AssetAlphaNum12.Decode(stream);
                    break;
            }
            return decodedAsset;
        }

        public class AssetAlphaNum4
        {
            public byte[] AssetCode { get; set; }
            public AccountID Issuer { get; set; }

            public static void Encode(XdrDataOutputStream stream, AssetAlphaNum4 encodedAssetAlphaNum4)
            {
                var assetCodesize = encodedAssetAlphaNum4.AssetCode.Length;
                stream.Write(encodedAssetAlphaNum4.AssetCode, 0, assetCodesize);
                AccountID.Encode(stream, encodedAssetAlphaNum4.Issuer);
            }

            public static AssetAlphaNum4 Decode(XdrDataInputStream stream)
            {
                var decodedAssetAlphaNum4 = new AssetAlphaNum4();
                var assetCodesize = 4;
                decodedAssetAlphaNum4.AssetCode = new byte[assetCodesize];
                stream.Read(decodedAssetAlphaNum4.AssetCode, 0, assetCodesize);
                decodedAssetAlphaNum4.Issuer = AccountID.Decode(stream);
                return decodedAssetAlphaNum4;
            }
        }

        public class AssetAlphaNum12
        {
            public byte[] AssetCode { get; set; }
            public AccountID Issuer { get; set; }

            public static void Encode(XdrDataOutputStream stream, AssetAlphaNum12 encodedAssetAlphaNum12)
            {
                var assetCodesize = encodedAssetAlphaNum12.AssetCode.Length;
                stream.Write(encodedAssetAlphaNum12.AssetCode, 0, assetCodesize);
                AccountID.Encode(stream, encodedAssetAlphaNum12.Issuer);
            }

            public static AssetAlphaNum12 Decode(XdrDataInputStream stream)
            {
                var decodedAssetAlphaNum12 = new AssetAlphaNum12();
                var assetCodesize = 12;
                decodedAssetAlphaNum12.AssetCode = new byte[assetCodesize];
                stream.Read(decodedAssetAlphaNum12.AssetCode, 0, assetCodesize);
                decodedAssetAlphaNum12.Issuer = AccountID.Decode(stream);
                return decodedAssetAlphaNum12;
            }
        }
    }
}