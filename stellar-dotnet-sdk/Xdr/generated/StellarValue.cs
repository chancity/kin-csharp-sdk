// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

namespace stellar_dotnet_sdk.xdr
{
// === xdr source ============================================================

//  struct StellarValue
//  {
//      Hash txSetHash;   // transaction set to apply to previous ledger
//      uint64 closeTime; // network close time
//  
//      // upgrades to apply to the previous ledger (usually empty)
//      // this is a vector of encoded 'LedgerUpgrade' so that nodes can drop
//      // unknown steps during consensus if needed.
//      // see notes below on 'LedgerUpgrade' for more detail
//      // max size is dictated by number of upgrade types (+ room for future)
//      UpgradeType upgrades<6>;
//  
//      // reserved for future use
//      union switch (int v)
//      {
//      case 0:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
    public class StellarValue
    {
        public Hash TxSetHash { get; set; }
        public Uint64 CloseTime { get; set; }
        public UpgradeType[] Upgrades { get; set; }
        public StellarValueExt Ext { get; set; }

        public static void Encode(XdrDataOutputStream stream, StellarValue encodedStellarValue)
        {
            Hash.Encode(stream, encodedStellarValue.TxSetHash);
            Uint64.Encode(stream, encodedStellarValue.CloseTime);
            var upgradessize = encodedStellarValue.Upgrades.Length;
            stream.WriteInt(upgradessize);
            for (var i = 0; i < upgradessize; i++) UpgradeType.Encode(stream, encodedStellarValue.Upgrades[i]);
            StellarValueExt.Encode(stream, encodedStellarValue.Ext);
        }

        public static StellarValue Decode(XdrDataInputStream stream)
        {
            var decodedStellarValue = new StellarValue();
            decodedStellarValue.TxSetHash = Hash.Decode(stream);
            decodedStellarValue.CloseTime = Uint64.Decode(stream);
            var upgradessize = stream.ReadInt();
            decodedStellarValue.Upgrades = new UpgradeType[upgradessize];
            for (var i = 0; i < upgradessize; i++) decodedStellarValue.Upgrades[i] = UpgradeType.Decode(stream);
            decodedStellarValue.Ext = StellarValueExt.Decode(stream);
            return decodedStellarValue;
        }

        public class StellarValueExt
        {
            public int Discriminant { get; set; }

            public static void Encode(XdrDataOutputStream stream, StellarValueExt encodedStellarValueExt)
            {
                stream.WriteInt(encodedStellarValueExt.Discriminant);
                switch (encodedStellarValueExt.Discriminant)
                {
                    case 0:
                        break;
                }
            }

            public static StellarValueExt Decode(XdrDataInputStream stream)
            {
                var decodedStellarValueExt = new StellarValueExt();
                var discriminant = stream.ReadInt();
                decodedStellarValueExt.Discriminant = discriminant;
                switch (decodedStellarValueExt.Discriminant)
                {
                    case 0:
                        break;
                }
                return decodedStellarValueExt;
            }
        }
    }
}